/* eslint-disable @typescript-eslint/no-unused-vars */
import {
    Injectable,
    BadRequestException,
    InternalServerErrorException,
    NotFoundException,
  } from '@nestjs/common';
  import { InjectRepository } from '@nestjs/typeorm';
  import { Repository, In, Not,FindOptionsWhere } from 'typeorm';
  
  import { GlobalService } from '../../utils/global/global.service';
  import { <%= entityName %> } from './entities/<%= entityFileName %>.entity';
import {
  PaginationResDto,
  ServiceResDto,
  TypeOrmDeleteResult,
} from '../../utils/global/dto/global.dto';
import {
  PrimaryKeys<%= className %>Dto, 
  Create<%= entityName %>BodyReqDto,
  UpdateAndDelete<%= className %>BodyReqDto
} from './dto/<%= entityFileName %>.dto';
import { ModelService } from '../../utils/model/model.service';
import { DeleteRollBackDto } from '../../utils/model/model.dto';
import { CustomLogger } from 'src/utils/logger/logger.service';
import {plainToInstance} from 'class-transformer';
<% if(creationConfig.operator) {%>
  import { User } from '../user/entities/user.entity';
<% } %>
<%
  const importedRelations = new Set();
%>
<% fields.forEach(field => { %>
  <% if (field.relation && field.relation.type === 'ManyToMany'  && !importedRelations.has(field.relation.target)) { 
       const relationFile = field.relation.target.toLowerCase();
       const relatedClass= field.relation.target[0].toUpperCase() + field.relation.target.slice(1);
       importedRelations.add(field.relation.target);
  %>
    import { PrimaryKeys<%= relatedClass %>Dto , MultiplePrimaryKeys<%=relatedClass %>Dto } from "../<%= relationFile %>/dto/<%= relationFile %>.dto";
    import { <%= field.relation.target %> } from "../<%= relationFile %>/entities/<%= relationFile %>.entity";
  <% } %>
<% }) %>

  

  @Injectable()
  export class <%= entityName %>Service {
    constructor(
      @InjectRepository(<%= entityName %>)
      private <%= entityVar %>Repository: Repository<<%= entityName %>>,
      <% importedRelations.forEach(entity => { %>
        @InjectRepository(<%= entity %>)
        private <%= entity.toLowerCase() %>Repository: Repository<<%= entity %>>,
      <% }) %>
      private globalService: GlobalService,
      private modelService: ModelService,
      private readonly customLogger: CustomLogger,
    ) {}
  
    async findMany(
      where: FindOptionsWhere<<%= entityName %>>  = {},
      page: number,
      limit: number,
    ): Promise<ServiceResDto<<%= entityName %>[]>> {try{
      const skipRecord = this.globalService.getSkipRecord(page, limit);
      const [dataArray, dataCount] = await this.<%= entityVar %>Repository.findAndCount({
        where,
        take: limit,
        skip: skipRecord,
      });
      const paginationData = this.globalService.setPagination(page, limit, dataCount);
      return {
        data: dataArray,
        pagination: paginationData,
      };}catch (error) {
        this.customLogger.error('Error while finding roles::', error.stack);
        throw new InternalServerErrorException(error);
      }
    }
  
    async create(
      createDto:Create<%= entityName %>BodyReqDto,
      <% if(creationConfig.operator) {%>
        createdByUser: User,
      <% } %>
      
    ): Promise<<%= entityName %>> {
      
  
      const createEntity: <%= entityName %> = this.<%= entityVar %>Repository.create({
        ...createDto,
        <% if(creationConfig.operator) {%>
        createdBy: createdByUser,
        updatedBy: createdByUser,
        <% } %>
      });
      const saveEntity: <%= entityName %> = await this.<%= entityVar %>Repository.save(createEntity);
      if (!saveEntity) {
        throw new BadRequestException('Fail to create');
      }
      return this.modelService.removeUserBy(saveEntity);
    }
  
    async findOne(primaryKeyFields:PrimaryKeys<%= className %>Dto,): Promise<<%= entityName %>> {
        const metadata = this.<%= entityVar %>Repository.metadata;
        const allRelations = metadata.relations.map((rel) => rel.propertyName);
      const data = await this.<%= entityVar %>Repository.findOne({
        where: { 
          <% if (primaryFields) { %>          
            <% primaryFields.forEach(element => { %>
            <%= element.name %>:primaryKeyFields.<%= element.name %>,
          <% }) %>
          <% } else { %>
            id: primaryKeyFields.id
          <% } %>
      },
      relations: allRelations,
      });
      if (!data) throw new BadRequestException('<%= entityName %> not found');
      return data;
    }
  
  
    async update(
      updateDto: UpdateAndDelete<%= className %>BodyReqDto,
      primaryKeyFields: PrimaryKeys<%= className %>Dto, 
        <% if(creationConfig.operator) {%>
          updatedByUser: User,
        <% } %>
        <% if (creationConfig.withSoftDelete) { %>
      isRollback = false,
      <% } %>
    ): Promise<<%= entityName %>> {
      <% if (creationConfig.withSoftDelete) { %>
      const rollbackObj: DeleteRollBackDto = isRollback ? { withDeleted: true } : {};
      <% } %>
      let entity = await this.<%= entityVar %>Repository.findOne({
        where: { 
                  <% if (primaryFields) { %>          
                    <% primaryFields.forEach(element => { %>
                    <%= element.name %>:primaryKeyFields.<%= element.name %>,
                  <% }) %>
                  <% } else { %>
                    id: primaryKeyFields.id
                  <% } %>
              },
              <% if (creationConfig.withSoftDelete) { %>
        ...rollbackObj,
        <% } %>
      });
      if (!entity) throw new BadRequestException('<%= entityName %> not found');
  
      entity = this.modelService.updateModelValue(entity, updateDto, <% if(creationConfig.operator) {%>
        updatedByUser,
      <% } %>);
  
      return await this.<%= entityVar %>Repository.save(entity);
    }
  
    async delete(primaryKeyFields:PrimaryKeys<%= className %>Dto,): Promise<boolean> {
      const data = await this.<%= entityVar %>Repository.findOne({
        where: { 
          <% if (primaryFields) { %>          
            <% primaryFields.forEach(element => { %>
            <%= element.name %>:primaryKeyFields.<%= element.name %>,
          <% }) %>
          <% } else { %>
            id: primaryKeyFields.id
          <% } %>
      },
        withDeleted: true,
      });
  
      if (!data) throw new BadRequestException('<%= entityName %> not exists');
      <% if (creationConfig.withSoftDelete) { %>
      if (!data.deletedAt) throw new BadRequestException('Only soft-deleted records can be deleted');
      <% } %>
      const result = await this.<%= entityVar %>Repository.delete(primaryKeyFields);
      return result.affected ? true : false;
    }

    // logic for entries in join  tables
    <% fields.forEach(field => { %>
      
      <% if (field.relation?.type==="ManyToMany") {%>
        <% const relatedClass= field.relation.target[0].toUpperCase() + field.relation.target.slice(1); %>

        async addOne<%= field.name.charAt(0).toUpperCase() + field.name.slice(1) %>(bodyReq:PrimaryKeys<%= relatedClass %>Dto, primaryKeyFields:PrimaryKeys<%= className %>Dto,)
        {
          const <%= entityVar %> = await this.<%= entityVar %>Repository.findOne({
            where: {
              <% if (primaryFields) { %>          
                <% primaryFields.forEach(element => { %>
                  <%= element.name %>:primaryKeyFields.<%= element.name %>,
                <% }) %>
              <% } else { %>
                id: primaryKeyFields.id
              <% } %>
            },
            relations: ['<%= field.name %>', ], // Include the relation to modify it
          });

          if (!<%= entityVar %>) throw new NotFoundException('<%= entityName %> not found');
          const where = plainToInstance(<%= field.relation.target %>, bodyReq);
          const <%=field.relation.target.toLowerCase()%>s = await this.<%=field.relation.target.toLowerCase()%>Repository.findOne({ 
            where: where as FindOptionsWhere<<%= field.relation.target %>>,});

          if ( <%=field.relation.target.toLowerCase()%>s) {
             // Append or replace related <%=field.relation.target.toLowerCase()%>s
              <%= entityVar %>.<%= field.name %> = [...<%= entityVar %>.<%= field.name %>, <%=field.relation.target.toLowerCase()%>s];
            } else {
              // Handle case when role is not found
              throw new NotFoundException('<%=field.relation.target%> not found');
            }

          return await this.<%= entityVar %>Repository.save(<%= entityVar %>); 
        }

        async addMany<%= field.name.charAt(0).toUpperCase() + field.name.slice(1) %>(bodyReq:MultiplePrimaryKeys<%=relatedClass %>Dto, primaryKeyFields:PrimaryKeys<%= className %>Dto,)
        {
          const <%= entityVar %> = await this.<%= entityVar %>Repository.findOne({
            where: {
              <% if (primaryFields) { %>          
                <% primaryFields.forEach(element => { %>
                  <%= element.name %>:primaryKeyFields.<%= element.name %>,
                <% }) %>
              <% } else { %>
                id: primaryKeyFields.id
              <% } %>
            },
            relations: ['<%= field.name %>', ], // Include the relation to modify it
          });

          if (!<%= entityVar %>) throw new NotFoundException('<%= entityName %> not found');

          // const whereConditions: FindOptionsWhere<<%= field.relation.target %>>[] = bodyReq.items.map(
          //   (item) => plainToInstance(<%= field.relation.target %>, item),);
          const whereConditions = bodyReq.items as FindOptionsWhere<<%= field.relation.target %>>[];
          
          const <%=field.relation.target.toLowerCase()%>s = await this.<%=field.relation.target.toLowerCase()%>Repository.find({ 
            where: whereConditions,});

          if ( <%=field.relation.target.toLowerCase()%>s.length === bodyReq.items.length) {
             // Append or replace related <%=field.relation.target.toLowerCase()%>s
              <%= entityVar %>.<%= field.name %> = [...<%= entityVar %>.<%= field.name %>, ...<%=field.relation.target.toLowerCase()%>s];
            } else {
              // Handle case when role is not found
              throw new NotFoundException('<%=field.relation.target%> not found');
            }

          return await this.<%= entityVar %>Repository.save(<%= entityVar %>); 
        }
      <% } %>
    <% }) %>


  }
  