import {
  UseGuards,
  Controller,
  Get,
  Post,
  Put,
  Delete,
  Body,
  Query,
  HttpCode,
  HttpStatus,
} from '@nestjs/common';
import {
  ApiTags,
  ApiOperation,
  ApiResponse,
  ApiQuery,
  getSchemaPath,
  ApiBody,
  ApiBearerAuth,
} from '@nestjs/swagger';
import { AdminAuthGuard } from '../../guards/adminAuth.guard';
import { AdminAuthDecorator } from '../../decorators/adminAuth.decorator';
import { PermissionDecorator } from '../../decorators/permission.decorator';
import { GlobalService } from '../../utils/global/global.service';
import { <%= className %>Service } from './<%= fileName %>.service';
import { <%= relatedEntityClass %> } from '../../configs/entity.config';
import { <%= className %> } from './entities/<%= fileName %>.entity';
import { <%= camelName %>PermissionsConstant } from './constants/permission.constant';
import {
  ControllerResDto,
  ServiceResDto,
} from '../../utils/global/dto/global.dto';
import {
  FindMany<%= className %>QueryReq,
  PrimaryKeys<%= className %>Dto,
  Create<%= className %>BodyReqDto,
  Update<%= className %>BodyReqDto,
  <% if(creationConfig?.withSoftDelete) { %>
     Delete<%= className %>BodyReqDto,
  <% } %>
} from './dto/<%= fileName %>.dto';

<%
  const importedRelations = new Set();
%>
<% fields.forEach(field => { %>
  <% if (field.relation && field.relation.type === 'ManyToMany'  && !importedRelations.has(field.relation.target)) { 
       const relationFile = field.relation.target.toLowerCase();
       const relatedClass= field.relation.target[0].toUpperCase() + field.relation.target.slice(1);
       importedRelations.add(field.relation.target);
  %>
import {  MultiplePrimaryKeys<%=relatedClass %>Dto } from "../<%= relationFile %>/dto/<%= relationFile %>.dto";
  <% } %>
<% }) %>

@ApiTags('generated - <%= className %> ')
@ApiBearerAuth('access-token')
@Controller({ path: 'admin/<%= fileNamePlural %>', version: '1' })
@UseGuards(AdminAuthGuard)
export class <%= className %>Controller {
  constructor(
    private globalService: GlobalService,
    private <%= camelName %>Service: <%= className %>Service,
  ) {}

  @Get()
  @HttpCode(HttpStatus.OK)
  @PermissionDecorator(<%= camelName %>PermissionsConstant.ADMIN_<%= constantName %>_FIND_ALL)
  @ApiOperation({ summary: 'Get all <%= className %>s', description: 'Get all <%= className %>s', })
  @ApiQuery({ name: 'page', required: true, type: Number })
  @ApiQuery({ name: 'limit', required: true, type: Number })
  @ApiResponse({ status: 200, description: 'List of <%= className %>s', type: [<%= className %>] })
  async findMany(
    @Query() findManyQueryReq: FindMany<%= className %>QueryReq,
  ): Promise<ControllerResDto<<%= className %>[]>> {
    const { page, limit } = findManyQueryReq;
    const { data, pagination }: ServiceResDto<<%= className %>[]> =
      await this.<%= camelName %>Service.findMany(null, page, limit);
    return this.globalService.setControllerResponse(data, null, pagination);
  }

  @Post()
  @HttpCode(HttpStatus.OK)
  @PermissionDecorator(<%= camelName %>PermissionsConstant.ADMIN_<%= constantName %>_CREATE)
  @ApiOperation({ summary: 'Create a new <%= className %>' })
  @ApiBody({ type: Create<%= className %>BodyReqDto }) 
  @ApiResponse({ status: 200, description: '<%= className %> created', type: <%= className %> })
  async create(
    <% if(creationConfig?.operator) {%>
      @AdminAuthDecorator() adminAuth: any,
    <% } %>
    @Body() bodyReq: Create<%= className %>BodyReqDto,
  ): Promise<ControllerResDto<<%= className %>>> {
    const result = await this.<%= camelName %>Service.create(bodyReq <% if(creationConfig?.operator) {%>
     , adminAuth,
    <% } %>);
    return this.globalService.setControllerResponse(result, '<%= className %> created successfully.');
  }

  @Get('getOne')
  @HttpCode(HttpStatus.OK)
  @PermissionDecorator(<%= camelName %>PermissionsConstant.ADMIN_<%= constantName %>_FIND_ONE)
  @ApiOperation({ summary: 'Get a <%= className %> by PrimaryKeyFields' })
  // @ApiQuery({ type: PrimaryKeys<%= className %>Dto, name: 'primaryKeyDto', required: true })
  @ApiResponse({ status: 200, description: '<%= className %> data', type: <%= className %> })
  async findOne( @Query() primaryKeyDto:PrimaryKeys<%= className %>Dto): Promise<ControllerResDto<<%= className %>>> {
    const result = await this.<%= camelName %>Service.findOne(primaryKeyDto);
    return this.globalService.setControllerResponse(result);
  }

  @Put('updateOne')
  @HttpCode(HttpStatus.OK)
  @PermissionDecorator(<%= camelName %>PermissionsConstant.ADMIN_<%= constantName %>_UPDATE)
  @ApiOperation({ summary: 'Update a <%= className %> by PrimaryKeyFields' })
  // @ApiQuery({ type: PrimaryKeys<%= className %>Dto, name: 'primaryKeyDto', required: true })
  @ApiBody({ type: Update<%= className %>BodyReqDto }) 
  @ApiResponse({ status: 200, description: '<%= className %> updated', type: <%= className %> })
  async update(
    <% if(creationConfig?.operator) {%>
      @AdminAuthDecorator() adminAuth: any,
    <% } %>
    @Query() primaryKeyDto: PrimaryKeys<%= className %>Dto,      
    @Body() bodyReq: Update<%= className %>BodyReqDto,
  ): Promise<ControllerResDto<<%= className %>>> {
    const result = await this.<%= camelName %>Service.update(bodyReq, primaryKeyDto<% if(creationConfig?.operator) {%>
      , adminAuth,
     <% } %>);
    return this.globalService.setControllerResponse(result, '<%= className %> updated successfully.');
  }

  @Delete('deletePermanent')
  @HttpCode(HttpStatus.OK)
  @PermissionDecorator(<%= camelName %>PermissionsConstant.ADMIN_<%= constantName %>_HARD_DELETE)
  @ApiOperation({ summary: 'Permanently delete a <%= className %> by PrimaryKeyFields' })
  // @ApiQuery({ type: PrimaryKeys<%= className %>Dto, name: 'primaryKeyDto', required: true })
  @ApiResponse({ status: 200, description: '<%= className %> permanently deleted' })
  async hardDelete(@Query() primaryKeyDto:   PrimaryKeys<%= className %>Dto
   ): Promise<ControllerResDto<{ isDeleted: boolean }>> {
    const isDeleted = await this.<%= camelName %>Service.delete(primaryKeyDto);
    return this.globalService.setControllerResponse({ isDeleted }, '<%= className %> deleted successfully.');
  }
<% if(creationConfig?.withSoftDelete) { %>
  @Delete('deleteOne')
  @HttpCode(HttpStatus.OK)
  @PermissionDecorator(<%= camelName %>PermissionsConstant.ADMIN_<%= constantName %>_SOFT_DELETE)
  @ApiOperation({ summary: 'Soft delete a <%= className %> by PrimaryKeyFields' })
  // @ApiQuery({ type: PrimaryKeys<%= className %>Dto, name: 'primaryKeyDto', required: true })
  @ApiResponse({ status: 200, description: '<%= className %> soft deleted' })
  async softDelete(
    <% if(creationConfig?.operator) {%>
      @AdminAuthDecorator() adminAuth: any,
    <% } %>
    @Query() primaryKeyDto: PrimaryKeys<%= className %>Dto,): Promise<ControllerResDto<{ isDeleted: boolean }>> {
    const bodyReq: Delete<%= className %>BodyReqDto = { hasSoftDeleted: true };
    const result = await this.<%= camelName %>Service.update(bodyReq, primaryKeyDto<% if(creationConfig?.operator) {%>
      , adminAuth,
     <% } %>);
    return this.globalService.setControllerResponse({ isDeleted: !!result }, '<%= className %> deleted successfully.');
  }

  @Put('rollbackOne')
  @HttpCode(HttpStatus.OK)
  @PermissionDecorator(<%= camelName %>PermissionsConstant.ADMIN_<%= constantName %>_ROLLBACK)
  @ApiOperation({ summary: 'Rollback soft-deleted <%= className %> by PrimaryKeyFields' })
  // @ApiQuery({ type: PrimaryKeys<%= className %>Dto, name: 'primaryKeyDto', required: true })
  @ApiResponse({
    status: 200,
    description: 'Soft deleted <%= className %> rolled back',
    type: <%= className %>,
  })
  async rollback(
    <% if(creationConfig?.operator) {%>
      @AdminAuthDecorator() adminAuth: any,
    <% } %>
    @Query() primaryKeyDto:PrimaryKeys<%= className %>Dto,): Promise<ControllerResDto<<%= className %>>> {
    const bodyReq: Delete<%= className %>BodyReqDto = { hasSoftDeleted: false };
    const result = await this.<%= camelName %>Service.update(bodyReq, primaryKeyDto,
    <% if(creationConfig?.operator) {%>
      adminAuth,
     <% } %> 
     true);
    return this.globalService.setControllerResponse(result, '<%= className %> rollback successful.');
  }
  <% } %>
 // apis for entries in join  tables
  <% fields.forEach(field => { %>

    <% if (field.relation?.type==="ManyToMany") {%>
      <% const relatedClass= field.relation.target[0].toUpperCase() + field.relation.target.slice(1); %>
     

      @Post('modify<%= field.name.charAt(0).toUpperCase() + field.name.slice(1) %>')
      @HttpCode(HttpStatus.OK)
      @PermissionDecorator(<%= camelName %>PermissionsConstant.ADMIN_<%= constantName %>_CREATE)
      @ApiOperation({ summary: 'Modify <%= field.name.charAt(0).toUpperCase() + field.name.slice(1) %> (connect/disconnect IDs)' })
      // @ApiQuery({ type: PrimaryKeys<%= className %>Dto })
      @ApiBody({
        schema: {
          type: 'object',
          properties: {
            connectIds: { $ref: getSchemaPath(MultiplePrimaryKeys<%= relatedClass %>Dto) },
            disconnectIds: { $ref: getSchemaPath(MultiplePrimaryKeys<%= relatedClass %>Dto) },
          },
        },
      })
      @ApiResponse({
        status: 200,
        description: 'modify<%= field.name.charAt(0).toUpperCase() + field.name.slice(1) %> updated successfully.',
        schema: {
          example: {
            statusCode: 200,
            message: 'Modified <%= field.name.charAt(0).toUpperCase() + field.name.slice(1) %>  successfully.',
            data: { isAdded: true },
          },
        },
      })
      async addMany<%= field.name.charAt(0).toUpperCase() + field.name.slice(1) %>(
        @Body('connectIds') connectIds:  MultiplePrimaryKeys<%=relatedClass %>Dto,
        @Body('disconnectIds') disconnectIds: MultiplePrimaryKeys<%=relatedClass %>Dto,
        @Query() primaryKeyDto:PrimaryKeys<%= className %>Dto,): Promise<ControllerResDto<{ isAdded: boolean }>> {
        const result = await this.<%= camelName %>Service.modify<%= field.name.charAt(0).toUpperCase() + field.name.slice(1) %>(connectIds, disconnectIds,primaryKeyDto,);
        return this.globalService.setControllerResponse({ isAdded: !!result }, 'Modified <%= field.name.charAt(0).toUpperCase() + field.name.slice(1) %>  successfully.');
      }
      <% } %>
   
  <% }) %>
}
