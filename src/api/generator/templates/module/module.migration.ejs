import { MigrationInterface, QueryRunner, Table } from "typeorm";


export class Create<%= name %>Table<%= timestamp %> implements MigrationInterface {
  public async up(queryRunner: QueryRunner): Promise<void> {
    await queryRunner.createTable(new Table({
      name: "<%= tableName %>",
      columns: [
      <% if (primaryFields && primaryFields.length === 1) { %>
        {
          name: '<%= primaryFields[0].dbName || snakeCase(primaryFields[0].name) %>',
          <% if (primaryFields[0].dtype === "uuid") { %>
            type: 'char',
            length: '36',
          <% } else { %>
            type: '<%= primaryFields[0].dtype || "bigint" %>',
          <% } %>
          
          isPrimary: true,
          isGenerated: true,
          generationStrategy: '<%= primaryFields[0].dtype === "uuid" ? "uuid" : "increment" %>',
        },
      <% } else if (primaryFields && primaryFields.length > 1) { %>
        <% primaryFields.forEach((field, index) => { %>
          {
            name: '<%= field.dbName || snakeCase(field.name) %>',
            <% if (field.dtype === "uuid") { %>
              type: 'char',
              length: '36',
            <% } else { %>
              type: '<%= field.dtype || "bigint" %>',
            <% } %> 
            isPrimary: true<%= index < primaryFields.length - 1 ? ',' : '' %>
          },
        <% }); %>
      <% } else { %>
        {
          name: 'id',
          type: 'bigint',
          isPrimary: true,
          isGenerated: true,
          generationStrategy: 'increment',
        },
      <% } %>
<% fields.forEach(field => { %>
  <% if (!field.relation) { %>
        {
          <% if (field.dbName) { %>name: '<%= field.dbName %>',<% } else{ %>name: '<%= snakeCase(field.name) %>' <% } %>,
          <% if (field.dtype === 'enum') { %>
            type: "enum('<%- field.enum.join("','") %>')",
            <% if(field.default) { %>
              default: "'<%=field.default %>'",  
            <% } %>
          <% } else if (field.dtype === 'uuid') { %>
            type: "char",
            length: "36",
          <% } else { %>
          type: "<%= field.dtype ||  typeMap[field.type] || 'varchar' %>",
          <% if(field.default) { %>
            default: <%- JSON.stringify(field.default) %>,  
          <% } %>
          <% }  %>
          <% if (field.length || field.dtype==='varchar' || !field.dtype) { %>length: '<%= field.length || 255 %>',<% } %>
          <% if (field.nullable !== undefined) { %>isNullable: <%= field.nullable %>,<% } %>
          <% if (field.unique) { %>isUnique: true,<% } %>
        },
  <% } else { %>
        {
          name: "<%= field.name %>Id",
          type: "int",
        },
  <% } %>
<% }) %>
        {
          name: "created_at",
          type: "timestamp",
          default: "now()",
        },
        {
          name: "updated_at",
          type: "timestamp",
          default: "now()",
        },
        {
          name: "deleted_at",
          type: "timestamp",
          isNullable: true,
        },
      ],
    }));
  }

  public async down(queryRunner: QueryRunner): Promise<void> {
    await queryRunner.dropTable("<%= tableName %>");
  }
}
